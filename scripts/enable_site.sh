#!/bin/bash
# Enable a BlockHead site by copying its generated nginx config and reloading nginx.
# Usage: ./scripts/enable_site.sh <domain>
# Example: ./scripts/enable_site.sh example.com
# This script must be run as root or via sudo.
# The script expects the nginx config generated by BlockHead to exist in
# generated_configs/<domain>.

set -e

# Determine the absolute path to this script's directory so path references
# work regardless of the caller's current working directory.
DIR="$(cd "$(dirname "$0")" && pwd)"

# Abort unless running with root privileges since we write to /etc/nginx.
if [ "$EUID" -ne 0 ]; then
  echo "This script must be run as root" >&2
  exit 1
fi

# Path where nginx stores site configuration files. This mirrors the layout
# used by Debian-based distributions.
NGINX_DIR="/etc/nginx"

# Ensure nginx appears to be installed before continuing. We check for the
# existence of the configuration directory. If it is missing, we cannot safely
# continue because subsequent commands would fail.
if [ ! -d "$NGINX_DIR" ]; then
  echo "Nginx does not appear to be installed (missing $NGINX_DIR)." >&2
  echo "Run ./scripts/install.sh or install nginx manually before retrying." >&2
  exit 1
fi

DOMAIN="$1"
if [ -z "$DOMAIN" ]; then
  echo "Usage: ./scripts/enable_site.sh <domain>" >&2
  exit 1
fi

CONFIG_DIR="$DIR/../generated_configs"
SOURCE="$CONFIG_DIR/$DOMAIN"
TARGET="/etc/nginx/sites-available/$DOMAIN"

# Ensure the sites-available and sites-enabled directories exist. They may be
# missing on a minimal install or if nginx was installed from scratch without
# default configuration. Creating them here avoids errors when copying and
# symlinking configuration files.
mkdir -p "/etc/nginx/sites-available" "/etc/nginx/sites-enabled"

# Ensure the config file exists before attempting to copy
if [ ! -f "$SOURCE" ]; then
  echo "Config $SOURCE not found" >&2
  exit 1
fi

# Ensure nginx directory structure exists. On a fresh install the
# /etc/nginx/sites-available and sites-enabled folders may be missing.
# mkdir -p creates them if necessary and does nothing if they already exist.
sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

# Copy config to nginx directory
cp "$SOURCE" "$TARGET"
# Create or update symlink in sites-enabled
ln -sf "$TARGET" "/etc/nginx/sites-enabled/$DOMAIN"
# Reload nginx to apply the changes
systemctl reload nginx

echo "Site $DOMAIN enabled and nginx reloaded."
